# -*- coding:utf-8 -*-
import torch
import copy
import numpy as np
import json
from mathutils import Matrix, Vector, Quaternion, Euler


### INICIO --- Inseri para utilizar no WHAM
def Rodrigues(rotvec):
    """罗德里格斯公式： 旋转向量 to 旋转矩阵[3*3]"""
    theta = np.linalg.norm(rotvec)
    r = (rotvec/theta).reshape(3, 1) if theta > 0. else rotvec
    cost = np.cos(theta)
    mat = np.asarray([[0, -r[2], r[1]],
                    [r[2], 0, -r[0]],
                    [-r[1], r[0], 0]],dtype=object) #adicionei "",dtype=object" por que estava dando erro
    return(cost*np.eye(3) + (1-cost)*r.dot(r.T) + np.sin(theta)*mat)

def rodrigues2bshapes(pose):
    """
    pose: size [1, 3维度欧拉角]。 这是一帧数据
    输出： 四元数
    """
    rod_rots = np.asarray(pose).reshape(1, 3)
    qua_rots = [Matrix(Rodrigues(rod_rot)).to_quaternion() for rod_rot in rod_rots]
    return qua_rots



data_load = torch.load("./hmr4d_results.pt")
true = True
false = False

temp = {"action_state":0,"body_format":2,"confidence":95.0,"coordinate_system":2,"coordinate_unit":0,"frame_id":160,"global_root_orientation":{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},"global_root_posititon":{"x":0.0,"y":0.0,"z":0.0},"id":1,"is_new":true,"keypoint":[{"x":0.0,"y":0.0,"z":0.0},{"x":0.0,"y":1.0,"z":0.0},{"x":0.0,"y":2.0,"z":0.0},{"x":0.0,"y":3.0,"z":0.0},{"x":0.0,"y":4.0,"z":0.0},{"x":0.0,"y":4.5,"z":0.0},{"x":-0.10000000149011612,"y":4.5,"z":0.10000000149011612},{"x":0.10000000149011612,"y":4.5,"z":0.10000000149011612},{"x":-0.20000000298023224,"y":4.0,"z":-0.10000000149011612},{"x":0.20000000298023224,"y":4.0,"z":-0.10000000149011612},{"x":-0.5,"y":3.5,"z":0.0},{"x":0.5,"y":3.5,"z":0.0},{"x":-1.0,"y":3.5,"z":0.0},{"x":1.0,"y":3.5,"z":0.0},{"x":-1.5,"y":3.0,"z":0.0},{"x":1.5,"y":3.0,"z":0.0},{"x":-2.0,"y":2.5,"z":0.0},{"x":2.0,"y":2.5,"z":0.0},{"x":-0.5,"y":0.0,"z":0.0},{"x":0.5,"y":0.0,"z":0.0},{"x":-0.5,"y":-1.0,"z":0.0},{"x":0.5,"y":-1.0,"z":0.0},{"x":-0.5,"y":-2.0,"z":0.0},{"x":0.5,"y":-2.0,"z":0.0},{"x":-0.5,"y":-2.5,"z":0.0},{"x":0.5,"y":-2.5,"z":0.0},{"x":-0.5,"y":-2.5,"z":-0.10000000149011612},{"x":0.5,"y":-2.5,"z":-0.10000000149011612},{"x":-0.5,"y":-2.0,"z":-0.10000000149011612},{"x":0.5,"y":-2.0,"z":-0.10000000149011612},{"x":-2.0,"y":2.5,"z":0.10000000149011612},{"x":2.0,"y":2.5,"z":0.10000000149011612},{"x":-2.0,"y":2.5,"z":-0.10000000149011612},{"x":2.0,"y":2.5,"z":-0.10000000149011612},{"x":-2.0,"y":2.5,"z":-0.20000000298023224},{"x":2.0,"y":2.5,"z":-0.20000000298023224},{"x":-2.0,"y":2.5,"z":-0.30000001192092896},{"x":2.0,"y":2.5,"z":-0.30000001192092896}],"keypoint_confidence":[100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0,100.0],"local_orientation_per_joint":[{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591},{"w":-0.22990426421165466,"x":0.0,"y":0.8097623586654663,"z":0.5398415923118591}],"local_position_per_joint":[{"x":0.0,"y":0.0,"z":0.0},{"x":0.0,"y":1.0,"z":0.0},{"x":0.0,"y":2.0,"z":0.0},{"x":0.0,"y":3.0,"z":0.0},{"x":0.0,"y":4.0,"z":0.0},{"x":0.0,"y":4.5,"z":0.0},{"x":-0.10000000149011612,"y":4.5,"z":0.10000000149011612},{"x":0.10000000149011612,"y":4.5,"z":0.10000000149011612},{"x":-0.20000000298023224,"y":4.0,"z":-0.10000000149011612},{"x":0.20000000298023224,"y":4.0,"z":-0.10000000149011612},{"x":-0.5,"y":3.5,"z":0.0},{"x":0.5,"y":3.5,"z":0.0},{"x":-1.0,"y":3.5,"z":0.0},{"x":1.0,"y":3.5,"z":0.0},{"x":-1.5,"y":3.0,"z":0.0},{"x":1.5,"y":3.0,"z":0.0},{"x":-2.0,"y":2.5,"z":0.0},{"x":2.0,"y":2.5,"z":0.0},{"x":-0.5,"y":0.0,"z":0.0},{"x":0.5,"y":0.0,"z":0.0},{"x":-0.5,"y":-1.0,"z":0.0},{"x":0.5,"y":-1.0,"z":0.0},{"x":-0.5,"y":-2.0,"z":0.0},{"x":0.5,"y":-2.0,"z":0.0},{"x":-0.5,"y":-2.5,"z":0.0},{"x":0.5,"y":-2.5,"z":0.0},{"x":-0.5,"y":-2.5,"z":-0.10000000149011612},{"x":0.5,"y":-2.5,"z":-0.10000000149011612},{"x":-0.5,"y":-2.0,"z":-0.10000000149011612},{"x":0.5,"y":-2.0,"z":-0.10000000149011612},{"x":-2.0,"y":2.5,"z":0.10000000149011612},{"x":2.0,"y":2.5,"z":0.10000000149011612},{"x":-2.0,"y":2.5,"z":-0.10000000149011612},{"x":2.0,"y":2.5,"z":-0.10000000149011612},{"x":-2.0,"y":2.5,"z":-0.20000000298023224},{"x":2.0,"y":2.5,"z":-0.20000000298023224},{"x":-2.0,"y":2.5,"z":-0.30000001192092896},{"x":2.0,"y":2.5,"z":-0.30000001192092896}],"nb_bodies":1,"position":{"x":1.0,"y":2.0,"z":3.0},"role":2,"timestamp":1734966480568014974,"tracking_state":1}

# world视角
# [1147(帧率), 63(21个关键点 估计是绝对旋转)]
body_pose = data_load["smpl_params_global"]["body_pose"]
orient = data_load["smpl_params_global"]["global_orient"] # root朝向
trans = data_load["smpl_params_global"]["transl"] # root位移
frames = trans.shape[0]

now = 0

body_pose_ = body_pose[now].tolist()
orient_ = orient[0].tolist()
trans_ = trans[0].tolist()
format_data = copy.deepcopy(temp)
format_data["global_root_orientation"] = rodrigues2bshapes(orient_)  # 四元数
format_data["global_root_posititon"] = trans_  # 位移


all_joint_data = []
for item_joint in range(int(len(body_pose_)/3)):
    start_index = 3*item_joint
    end_index = 3*(item_joint+1)
    #print(start_index, end_index)
    all_joint_data.append(rodrigues2bshapes(body_pose_[start_index:end_index]))

format_data["local_orientation_per_joint"] = all_joint_data  # 局部朝向

print(format_data)






















if __name__ == "__main__":
    pass









































